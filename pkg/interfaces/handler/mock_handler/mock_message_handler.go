// Code generated by MockGen. DO NOT EDIT.
// Source: message_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// HandleDelete mocks base method.
func (m *MockMessageHandler) HandleDelete() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDelete")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandleDelete indicates an expected call of HandleDelete.
func (mr *MockMessageHandlerMockRecorder) HandleDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDelete", reflect.TypeOf((*MockMessageHandler)(nil).HandleDelete))
}

// HandleInsert mocks base method.
func (m *MockMessageHandler) HandleInsert() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleInsert")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandleInsert indicates an expected call of HandleInsert.
func (mr *MockMessageHandlerMockRecorder) HandleInsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleInsert", reflect.TypeOf((*MockMessageHandler)(nil).HandleInsert))
}

// HandleSelect mocks base method.
func (m *MockMessageHandler) HandleSelect() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSelect")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandleSelect indicates an expected call of HandleSelect.
func (mr *MockMessageHandlerMockRecorder) HandleSelect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSelect", reflect.TypeOf((*MockMessageHandler)(nil).HandleSelect))
}

// HandleUpdate mocks base method.
func (m *MockMessageHandler) HandleUpdate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandleUpdate indicates an expected call of HandleUpdate.
func (mr *MockMessageHandlerMockRecorder) HandleUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdate", reflect.TypeOf((*MockMessageHandler)(nil).HandleUpdate))
}
