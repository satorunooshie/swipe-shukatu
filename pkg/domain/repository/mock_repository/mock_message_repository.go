// Code generated by MockGen. DO NOT EDIT.
// Source: message_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/satorunooshie/swipe-shukatu/pkg/domain/model"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMessageRepository) Delete(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageRepositoryMockRecorder) Delete(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageRepository)(nil).Delete), ctx, entity)
}

// InsertIMG mocks base method.
func (m *MockMessageRepository) InsertIMG(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIMG", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIMG indicates an expected call of InsertIMG.
func (mr *MockMessageRepositoryMockRecorder) InsertIMG(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIMG", reflect.TypeOf((*MockMessageRepository)(nil).InsertIMG), ctx, entity)
}

// InsertMessage mocks base method.
func (m *MockMessageRepository) InsertMessage(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage.
func (mr *MockMessageRepositoryMockRecorder) InsertMessage(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockMessageRepository)(nil).InsertMessage), ctx, entity)
}

// InsertRemind mocks base method.
func (m *MockMessageRepository) InsertRemind(ctx context.Context, entity *model.Message, ExecuteAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRemind", ctx, entity, ExecuteAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRemind indicates an expected call of InsertRemind.
func (mr *MockMessageRepositoryMockRecorder) InsertRemind(ctx, entity, ExecuteAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRemind", reflect.TypeOf((*MockMessageRepository)(nil).InsertRemind), ctx, entity, ExecuteAt)
}

// Select mocks base method.
func (m *MockMessageRepository) Select(ctx context.Context, rID int32) ([]*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, rID)
	ret0, _ := ret[0].([]*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockMessageRepositoryMockRecorder) Select(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockMessageRepository)(nil).Select), ctx, rID)
}

// Update mocks base method.
func (m *MockMessageRepository) Update(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMessageRepositoryMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageRepository)(nil).Update), ctx, entity)
}
