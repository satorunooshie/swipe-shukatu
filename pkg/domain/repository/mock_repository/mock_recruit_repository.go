// Code generated by MockGen. DO NOT EDIT.
// Source: recruit_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/satorunooshie/swipe-shukatu/pkg/domain/model"
)

// MockRecruitRepository is a mock of RecruitRepository interface.
type MockRecruitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecruitRepositoryMockRecorder
}

// MockRecruitRepositoryMockRecorder is the mock recorder for MockRecruitRepository.
type MockRecruitRepositoryMockRecorder struct {
	mock *MockRecruitRepository
}

// NewMockRecruitRepository creates a new mock instance.
func NewMockRecruitRepository(ctrl *gomock.Controller) *MockRecruitRepository {
	mock := &MockRecruitRepository{ctrl: ctrl}
	mock.recorder = &MockRecruitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecruitRepository) EXPECT() *MockRecruitRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRecruitRepository) Delete(ctx context.Context, entity *model.Recruit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecruitRepositoryMockRecorder) Delete(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecruitRepository)(nil).Delete), ctx, entity)
}

// Insert mocks base method.
func (m *MockRecruitRepository) Insert(ctx context.Context, entity *model.Recruit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRecruitRepositoryMockRecorder) Insert(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRecruitRepository)(nil).Insert), ctx, entity)
}

// Select mocks base method.
func (m *MockRecruitRepository) Select(ctx context.Context) ([]*model.Recruit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx)
	ret0, _ := ret[0].([]*model.Recruit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockRecruitRepositoryMockRecorder) Select(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockRecruitRepository)(nil).Select), ctx)
}

// SelectDetail mocks base method.
func (m *MockRecruitRepository) SelectDetail(ctx context.Context, rID int32) (*model.Recruit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDetail", ctx, rID)
	ret0, _ := ret[0].(*model.Recruit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDetail indicates an expected call of SelectDetail.
func (mr *MockRecruitRepositoryMockRecorder) SelectDetail(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDetail", reflect.TypeOf((*MockRecruitRepository)(nil).SelectDetail), ctx, rID)
}

// Update mocks base method.
func (m *MockRecruitRepository) Update(ctx context.Context, entity *model.Recruit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRecruitRepositoryMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecruitRepository)(nil).Update), ctx, entity)
}
