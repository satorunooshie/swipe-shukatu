// Code generated by MockGen. DO NOT EDIT.
// Source: message_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/satorunooshie/swipe-shukatu/pkg/domain/model"
	usecase "github.com/satorunooshie/swipe-shukatu/pkg/usecase"
)

// MockMessageUseCase is a mock of MessageUseCase interface.
type MockMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUseCaseMockRecorder
}

// MockMessageUseCaseMockRecorder is the mock recorder for MockMessageUseCase.
type MockMessageUseCaseMockRecorder struct {
	mock *MockMessageUseCase
}

// NewMockMessageUseCase creates a new mock instance.
func NewMockMessageUseCase(ctrl *gomock.Controller) *MockMessageUseCase {
	mock := &MockMessageUseCase{ctrl: ctrl}
	mock.recorder = &MockMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUseCase) EXPECT() *MockMessageUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMessageUseCase) Delete(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageUseCaseMockRecorder) Delete(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageUseCase)(nil).Delete), ctx, entity)
}

// InsertIMG mocks base method.
func (m *MockMessageUseCase) InsertIMG(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIMG", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIMG indicates an expected call of InsertIMG.
func (mr *MockMessageUseCaseMockRecorder) InsertIMG(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIMG", reflect.TypeOf((*MockMessageUseCase)(nil).InsertIMG), ctx, entity)
}

// InsertMessage mocks base method.
func (m *MockMessageUseCase) InsertMessage(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMessage", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMessage indicates an expected call of InsertMessage.
func (mr *MockMessageUseCaseMockRecorder) InsertMessage(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMessage", reflect.TypeOf((*MockMessageUseCase)(nil).InsertMessage), ctx, entity)
}

// InsertRemind mocks base method.
func (m *MockMessageUseCase) InsertRemind(ctx context.Context, entity *model.Message, ExecuteAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRemind", ctx, entity, ExecuteAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRemind indicates an expected call of InsertRemind.
func (mr *MockMessageUseCaseMockRecorder) InsertRemind(ctx, entity, ExecuteAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRemind", reflect.TypeOf((*MockMessageUseCase)(nil).InsertRemind), ctx, entity, ExecuteAt)
}

// Select mocks base method.
func (m *MockMessageUseCase) Select(ctx context.Context, rID int32) ([]*usecase.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, rID)
	ret0, _ := ret[0].([]*usecase.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockMessageUseCaseMockRecorder) Select(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockMessageUseCase)(nil).Select), ctx, rID)
}

// Update mocks base method.
func (m *MockMessageUseCase) Update(ctx context.Context, entity *model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMessageUseCaseMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageUseCase)(nil).Update), ctx, entity)
}
