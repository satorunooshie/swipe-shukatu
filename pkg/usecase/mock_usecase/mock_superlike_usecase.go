// Code generated by MockGen. DO NOT EDIT.
// Source: superlike_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/satorunooshie/swipe-shukatu/pkg/domain/model"
)

// MockSuperLikeUseCase is a mock of SuperLikeUseCase interface.
type MockSuperLikeUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSuperLikeUseCaseMockRecorder
}

// MockSuperLikeUseCaseMockRecorder is the mock recorder for MockSuperLikeUseCase.
type MockSuperLikeUseCaseMockRecorder struct {
	mock *MockSuperLikeUseCase
}

// NewMockSuperLikeUseCase creates a new mock instance.
func NewMockSuperLikeUseCase(ctrl *gomock.Controller) *MockSuperLikeUseCase {
	mock := &MockSuperLikeUseCase{ctrl: ctrl}
	mock.recorder = &MockSuperLikeUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuperLikeUseCase) EXPECT() *MockSuperLikeUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSuperLikeUseCase) Delete(ctx context.Context, entity *model.SuperLike) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSuperLikeUseCaseMockRecorder) Delete(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSuperLikeUseCase)(nil).Delete), ctx, entity)
}

// Insert mocks base method.
func (m *MockSuperLikeUseCase) Insert(ctx context.Context, entity *model.SuperLike, UID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, entity, UID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSuperLikeUseCaseMockRecorder) Insert(ctx, entity, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSuperLikeUseCase)(nil).Insert), ctx, entity, UID)
}

// Select mocks base method.
func (m *MockSuperLikeUseCase) Select(ctx context.Context, UID string) ([]*model.SuperLike, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", ctx, UID)
	ret0, _ := ret[0].([]*model.SuperLike)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockSuperLikeUseCaseMockRecorder) Select(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSuperLikeUseCase)(nil).Select), ctx, UID)
}

// Update mocks base method.
func (m *MockSuperLikeUseCase) Update(ctx context.Context, entity *model.SuperLike) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSuperLikeUseCaseMockRecorder) Update(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSuperLikeUseCase)(nil).Update), ctx, entity)
}
